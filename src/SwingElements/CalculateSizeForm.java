/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package SwingElements;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Scanner;
import javax.swing.DefaultListModel;

/**
 *
 * @author Redpox
 */
public class CalculateSizeForm extends javax.swing.JFrame implements Runnable {

    Base ref;                                                                   //Base object, usef for reference

    /**
     * Constructor.
     *
     * @param in {@link Base} object, used for reference
     */
    public CalculateSizeForm(Base in) {
        ref = in;
        initComponents();
        setTitle("Calculate Grid Size");
        BoundingSquareSizeTextField.setText(Integer.toString(Canvas.BOUNDING_RECTANGLE_WIDTH));
        updateNodeCountList();
        if (findEligibleNodeCounts(Integer.parseInt(BoundingSquareSizeTextField.getText())).contains(ref.getGraph().getMatrix().length)) {
            DefaultListModel model = (DefaultListModel) NodeCountList.getModel();
            for (int i = 0; i < model.getSize(); i++) {
                if (Integer.parseInt((String) model.get(i)) == ref.getGraph().getMatrix().length) {
                    NodeCountList.setSelectedIndex(i);
                }//end if
            }//end for
        }//end if
        BoundingSquareSizeTextField.requestFocus();
    }//end constructor

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel3 = new javax.swing.JPanel();
        jPanel6 = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        BoundingSquareSizeLabel = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        BoundingSquareSizeTextField = new javax.swing.JTextField();
        jPanel8 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        NodeNumberLabel = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        NodeCountList = new javax.swing.JList();
        jPanel7 = new javax.swing.JPanel();
        NodeSizeSpacingLabel = new javax.swing.JLabel();
        jScrollPane5 = new javax.swing.JScrollPane();
        NodeSizeSpacingList = new javax.swing.JList();
        jPanel5 = new javax.swing.JPanel();
        ApplyButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Calculate Grid Size");
        setBackground(new java.awt.Color(46, 97, 113));
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setMinimumSize(null);

        jPanel3.setBackground(new java.awt.Color(46, 97, 113));
        jPanel3.setPreferredSize(new java.awt.Dimension(500, 250));

        jPanel6.setBackground(new java.awt.Color(121, 128, 134));
        jPanel6.setPreferredSize(new java.awt.Dimension(480, 230));

        jPanel1.setBackground(new java.awt.Color(121, 128, 134));
        jPanel1.setToolTipText("");
        jPanel1.setPreferredSize(new java.awt.Dimension(450, 100));

        BoundingSquareSizeLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        BoundingSquareSizeLabel.setText("Bounding Square Size:");

        jPanel4.setBackground(new java.awt.Color(121, 128, 134));

        BoundingSquareSizeTextField.setBorder(null);
        BoundingSquareSizeTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                BoundingSquareSizeTextFieldKeyReleased(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(185, 185, 185)
                .addComponent(BoundingSquareSizeTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(185, 185, 185))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addComponent(BoundingSquareSizeTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(BoundingSquareSizeLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addComponent(BoundingSquareSizeLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(17, Short.MAX_VALUE))
        );

        jPanel2.setBackground(new java.awt.Color(121, 128, 134));

        NodeNumberLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        NodeNumberLabel.setText("Possible #s of Nodes");

        jScrollPane1.setBorder(null);

        NodeCountList.setModel(new DefaultListModel<String>());
        NodeCountList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        NodeCountList.setToolTipText("");
        NodeCountList.setMaximumSize(new java.awt.Dimension(33, 70));
        NodeCountList.setMinimumSize(new java.awt.Dimension(33, 70));
        NodeCountList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                NodeCountListValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(NodeCountList);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(NodeNumberLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 215, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(NodeNumberLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel7.setBackground(new java.awt.Color(121, 128, 134));

        NodeSizeSpacingLabel.setBackground(new java.awt.Color(255, 0, 0));
        NodeSizeSpacingLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        NodeSizeSpacingLabel.setText("Node Size/Spacing");

        jScrollPane5.setBorder(null);

        NodeSizeSpacingList.setModel(new DefaultListModel<String>()
        );
        jScrollPane5.setViewportView(NodeSizeSpacingList);

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(NodeSizeSpacingLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(NodeSizeSpacingLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(jPanel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        jPanel5.setBackground(new java.awt.Color(121, 128, 134));

        ApplyButton.setText("Apply");
        ApplyButton.setBorder(null);
        ApplyButton.setMaximumSize(new java.awt.Dimension(60, 25));
        ApplyButton.setMinimumSize(new java.awt.Dimension(60, 25));
        ApplyButton.setPreferredSize(new java.awt.Dimension(60, 25));
        ApplyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ApplyButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(202, 202, 202)
                .addComponent(ApplyButton, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addComponent(ApplyButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0))
        );

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 480, Short.MAX_VALUE)
            .addComponent(jPanel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jPanel8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(19, 19, 19)
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(12, 12, 12))
        );

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, 251, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Action handler for items on the NodeCountList. Updates the list of
     * potential grid size settings when the user selects a node count.
     */
    private void NodeCountListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_NodeCountListValueChanged
        NodeSizeSpacingList.clearSelection();
        if (!NodeCountList.isSelectionEmpty()) {
            int nodes = Integer.parseInt(NodeCountList.getSelectedValue().toString());
            HashMap<Integer, Integer> values = calculateNodeWidths(Integer.parseInt(BoundingSquareSizeTextField.getText()), nodes);
            DefaultListModel model = (DefaultListModel) NodeSizeSpacingList.getModel();
            model.removeAllElements();
            for (Integer i : values.keySet()) {
                model.addElement("Node size: " + i + ", Spacing: " + values.get(i));
            }//end for
        }//end if
    }//GEN-LAST:event_NodeCountListValueChanged

    /**
     * Action handler for the apply button. Parses grid sizing options, then
     * resizes the grid to match. Will clear the grid if the node count is
     * different from the current node count.
     */
    private void ApplyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ApplyButtonActionPerformed
        if (NodeCountList.getSelectedValue() != null && NodeSizeSpacingList.getSelectedValue() != null) {
            String count = (String) NodeCountList.getSelectedValue();
            String sizing = (String) NodeSizeSpacingList.getSelectedValue();
            int nodeSize = 0;
            int nodeSpacing = 0;
            int nodes = Integer.parseInt(count);
            Scanner scan = new Scanner(sizing);
            while (scan.hasNext()) {
                String test = scan.next();
                if (test.equals("size:")) {
                    String temp = scan.next();
                    temp = temp.substring(0, temp.length() - 1);
                    nodeSize = Integer.parseInt(temp);
                }//end if
                if (test.equals("Spacing:")) {
                    nodeSpacing = Integer.parseInt(scan.next());
                }//end if
            }//end while
            ref.getCanvas().setMinPointSize(nodeSize);
            ref.getCanvas().setMinSpacing(nodeSpacing);
            ref.getCanvas().setResized(true);
            if (ref.getGraph().getMatrix().length != nodes) {
                ref.resizeGrid(nodes, nodes, ref.getStepTime());
            }//end if
            Canvas.BOUNDING_RECTANGLE_HEIGHT = Integer.parseInt(BoundingSquareSizeTextField.getText());
            Canvas.BOUNDING_RECTANGLE_WIDTH = Integer.parseInt(BoundingSquareSizeTextField.getText());
        }//end if
    }//GEN-LAST:event_ApplyButtonActionPerformed

    /**
     * Action handler for BoundingSquareSizeTextField. Calls
     * {@link CalculateSizeForm#updateNodeCountList()}.
     */
    private void BoundingSquareSizeTextFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_BoundingSquareSizeTextFieldKeyReleased
        updateNodeCountList();
    }//GEN-LAST:event_BoundingSquareSizeTextFieldKeyReleased

    /**
     * Finds node counts that can have integer settings for a size of a given
     * size.
     *
     * @param in The size of the square(in pixels) to fit a grid inside
     * @return An {@link ArrayList} of integers, all of which are factors of in
     * + 1
     */
    private ArrayList<Integer> findEligibleNodeCounts(int in) {
        ArrayList<Integer> factors = new ArrayList<>();
        for (int i = 1; i <= in; i++) {
            if (in % i == 0) {
                factors.add(i + 1);
            }//end if
        }//end for
        return factors;
    }//end findEligibleNodeCounts

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton ApplyButton;
    private javax.swing.JLabel BoundingSquareSizeLabel;
    private javax.swing.JTextField BoundingSquareSizeTextField;
    private javax.swing.JList NodeCountList;
    private javax.swing.JLabel NodeNumberLabel;
    private javax.swing.JLabel NodeSizeSpacingLabel;
    private javax.swing.JList NodeSizeSpacingList;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane5;
    // End of variables declaration//GEN-END:variables

    @Override
    /**
     * Runs the form.
     */
    public void run() {
        if (ref != null) {
            setVisible(true);
        }//end if
    }//end run

    /**
     * Updates the list of eligible node counts after a user types a number.
     * Does nothing if the user has not entered a number, or if the number is
     * less than or equal to 0.
     */
    private void updateNodeCountList() {
        String text = BoundingSquareSizeTextField.getText();
        NodeCountList.clearSelection();
        NodeSizeSpacingList.clearSelection();
        DefaultListModel temp = (DefaultListModel) NodeSizeSpacingList.getModel();
        temp.removeAllElements();
        try {
            int test = Integer.parseInt(text);
            if (test > 0) {
                ArrayList<Integer> listItems = findEligibleNodeCounts(test);
                DefaultListModel model = (DefaultListModel) (NodeCountList.getModel());
                model.removeAllElements();
                for (Integer i : listItems) {
                    model.addElement(Integer.toString(i));
                }//end for
            }//end if
        } catch (NumberFormatException e) {
        }//end catch
    }//end updateNodeCountList

    /**
     * Calculates valid node sizes and spacings for a square of a given side,
     * with a given amount of nodes.
     *
     * @param rectangleSide The size of the square(in pixels) to test against
     * @param nodes The number of nodes in a row or column to test for sizing
     * @return A {@link HashMap} containing pairs of integers for node sizes and
     * node spacings
     */
    private HashMap<Integer, Integer> calculateNodeWidths(double rectangleSide, double nodes) {
        HashMap<Integer, Integer> out = new HashMap<>();
        double width;
        for (int i = 1, c = 0; i < 250 && c < 100; i++) {
            width = (rectangleSide / (nodes - 1)) - i;
            if (width <= 0) {
                break;
            }//end if
            if (width == Math.floor(width) && !Double.isInfinite(width)) {
                c++;
                out.put(i, (int) width);
            }//end if
        }//end for
        return out;
    }//end calculateNodeWidths
}//end CalculateSizeForm class
