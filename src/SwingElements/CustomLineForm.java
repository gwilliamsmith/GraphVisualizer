package SwingElements;

import graphvisualizer.Base;
import graphvisualizer.GraphTupleInfo;
import javax.swing.JOptionPane;
import javax.swing.JTextField;

/**
 *
 * @author Redpox
 */
public class CustomLineForm extends javax.swing.JFrame {

    GraphTupleInfo store;
    private boolean ready = false;
    private boolean complete = true;
    Base sim = null;

    public CustomLineForm() {
        initComponents();
    }//end constructor

    public void giveStoreLocation(GraphTupleInfo gfi) {
        store = gfi;
        ready = true;
    }//end giveStoreLocation

    public void giveField(Base b) {
        sim = b;
    }//end giveField

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        HealthLabel = new javax.swing.JLabel();
        HealthTextField = new javax.swing.JTextField();
        MutationLabel = new javax.swing.JLabel();
        MutationTextField = new javax.swing.JTextField();
        jColorChooser1 = new javax.swing.JColorChooser();
        SubmitButton = new javax.swing.JButton();
        CycleBaseLable = new javax.swing.JLabel();
        CycleBaseCheckBox = new javax.swing.JCheckBox();
        ReproductionClockLabel = new javax.swing.JLabel();
        ReproductionClockTextField = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        HealthLabel.setText("Health: ");

        MutationLabel.setText("Mutation Chance(out of 1000): ");

        SubmitButton.setText("OK");
        SubmitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SubmitButtonActionPerformed(evt);
            }
        });

        CycleBaseLable.setText("Cycle Base?");

        ReproductionClockLabel.setText("Turns for reproduction: ");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jColorChooser1, javax.swing.GroupLayout.PREFERRED_SIZE, 601, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(HealthLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(HealthTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(MutationLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(MutationTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(ReproductionClockLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(ReproductionClockTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(CycleBaseLable)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(CycleBaseCheckBox))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(274, 274, 274)
                        .addComponent(SubmitButton)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(CycleBaseCheckBox, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(HealthLabel)
                        .addComponent(HealthTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(MutationLabel)
                        .addComponent(MutationTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(CycleBaseLable)
                        .addComponent(ReproductionClockLabel)
                        .addComponent(ReproductionClockTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jColorChooser1, javax.swing.GroupLayout.PREFERRED_SIZE, 316, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(SubmitButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void SubmitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SubmitButtonActionPerformed
        complete = true;
        if (ready) {
            store.startHealth = checkTextField(HealthTextField, "Starting Health");
            store.mutationPercentage = checkTextField(MutationTextField, "Mutation Percentage");
            store.reproductionClock = checkTextField(ReproductionClockTextField, "Reproduction Clock");
            store.color = jColorChooser1.getColor();
            if (CycleBaseCheckBox.isSelected()) {
                if(store.startHealth > 0){
                    sim.setCycleBase(store.startHealth);
                }//end if
            }//end if
        }//end if
        if (complete) {
            this.dispose();
        }//end if
    }//GEN-LAST:event_SubmitButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox CycleBaseCheckBox;
    private javax.swing.JLabel CycleBaseLable;
    private javax.swing.JLabel HealthLabel;
    private javax.swing.JTextField HealthTextField;
    private javax.swing.JLabel MutationLabel;
    private javax.swing.JTextField MutationTextField;
    private javax.swing.JLabel ReproductionClockLabel;
    private javax.swing.JTextField ReproductionClockTextField;
    private javax.swing.JButton SubmitButton;
    private javax.swing.JColorChooser jColorChooser1;
    // End of variables declaration//GEN-END:variables

    private int checkTextField(JTextField field, String title) {
        int out;
        try {
            out = Integer.parseInt(field.getText());
            if (out < 0) {
                JOptionPane.showMessageDialog(this, "Enter a number greater than 0!", title, JOptionPane.ERROR_MESSAGE);
                complete = false;
                out = -1;
            }//end if
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "You must enter a number!", title, JOptionPane.ERROR_MESSAGE);
            complete = false;
            out = -1;
        }//end tryCatch
        return out;
    }//end checkTextField

}
